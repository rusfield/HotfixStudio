@using HotfixStudio.Infrastructure.PresentationData
@using HotfixStudio.Presentation.Components.BaseElements

<StackingContext>
    <Input @bind-Value="val" T="uint" Label="Text" />
    <SingleSelect @bind-Value="value" T="int" Label="Single" GetOptionsAsync="GetOptionsAsync" />
    <MultiSelect @bind-Value="values" T="int" Label="Multi" GetOptionsAsync="GetOptionsAsync" />
    <BasePagination TotalPages="5" />
    <Button>
        <Icon IconName="home" />
    </Button>
    <PopupMenu ListItemSections="listItemSections" />
</StackingContext>

@code {
    uint val = 2;
    int values = 33;
    int value = 1;

    static List<(string, EventCallback)> popupMenu = new()
    {
        new("Item 1", EventCallback.Empty),
         new("Item 2", EventCallback.Empty),
          new("Item 3", EventCallback.Empty),
           new("Item 4", EventCallback.Empty)
    };

    List<List<(string, EventCallback)>> listItemSections = new() { popupMenu, popupMenu, popupMenu };

    async Task<OptionResult<int>> GetOptionsAsync(OptionSearch<int> optionSearch)
    {
        await Task.Delay(1500, optionSearch.CancellationToken);

        var result = new OptionResult<int>();
        result.Options.Add(1, "Apple");
        result.Options.Add(2, "Orange Orange Orange OrangeOrange OrangeOrange Orange Orange OrangeOrange OrangeOrangeOrange");
        result.Options.Add(4, "Mango");
        result.Options.Add(8, "Pineapple");
        result.Options.Add(16, "Banana");
        result.Options.Add(32, "LUL");
        result.Options.Add(64, "BALD");
        result.Options.Add(128, "TRUE");
        result.Options.Add(256, "TRUUUEEEE");
        result.Options.Add(512, "BALDIE");
        result.Options.Add(1024, "AsmonBALD");
        result.Options.Add(2048, "McK");
        result.Options.Add(4096, "Lol");

        if (optionSearch.PageSize == 1)
        {
            result.Options = result.Options.Where(o => o.Key == optionSearch.SelectedValues.First()).ToDictionary<int, string>();
        }
        else if (!string.IsNullOrWhiteSpace(optionSearch.Search))
        {
            result.Options = result.Options.Where(v => v.Value.Contains(optionSearch.Search, StringComparison.OrdinalIgnoreCase)).ToDictionary<int, string>();
        }

        result.PageSize = optionSearch.PageSize;
        result.PageIndex = optionSearch.PageIndex;
        result.TotalRows = (int)new Random().NextInt64(50, 1000);
        return result;
    }
}
