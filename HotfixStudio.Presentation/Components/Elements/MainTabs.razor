@using HotfixStudio.Infrastructure.PresentationData
@using HotfixStudio.Presentation.Components.BaseElements

<div class="tabs-component">
    <div class="tabs-header" @ondblclick="OnTabDoubleClick">
        @foreach (var tab in tabs)
        {
            <div class="tabs-header-cell @GetTabClass(tab)" @onclick="(() => ChangeTab(tab))" @key="tab" style="@GetIconVariable(tab.IconName)">
                <div class="tabs-header-cell-corner" />
                <div class="tabs-header-cell-icon" />
                <div class="tabs-header-cell-label">
                    @tab.Label
                </div>
                @if (tab.IsClosable)
                { 
                    <div class="tabs-header-cell-close" @onclick="(() => CloseTab(tab))" />
                }
            </div>
        }
        @DragBarArea
    </div>

    <div class="tabs-body">
        @foreach (var tab in tabs)
        {
            <div class="tabs-body-content @GetTabClass(tab)" @key="tab">
                <StackingContext>
                    <DynamicComponent Type="tab.PageComponent" />
                </StackingContext>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment DragBarArea { get; set; }
    [Parameter]
    public EventCallback OnTabDoubleClick { get; set; }

    [Parameter]
    public int TabIndex { get; set; } = -1;

    [Parameter]
    public EventCallback<int> TabIndexChanged { get; set; }

    List<PageTab> tabs = new();
    PageTab? currentTab;

    PageTab? closingTab;

    void ChangeTab(PageTab tab)
    {
        if (currentTab != tab)
        {
            currentTab = tab;
            TabIndexChanged.InvokeAsync(tabs.IndexOf(tab));
        }
    }

    async Task CloseTab(PageTab tab)
    {
        closingTab = tab;
        this.StateHasChanged();
        await Task.Delay(200);
        var index = tabs.IndexOf(tab);
        tabs.Remove(tab);
        index = Math.Min(index, tabs.Count - 1);
        if (index >= 0)
            ChangeTab(tabs[index]);
        else 
            await TabIndexChanged.InvokeAsync(-1);
    }

    string GetTabClass(PageTab tab)
    {
        if (closingTab == tab)
            return "active closing";
        else if (currentTab == tab)
            return "active label";
        else
            return "text";
    }

    string GetIconVariable(string iconName)
    {
        return $"--component-iteration-icon:url('images/icons/{iconName}.png'), url('images/icons/INV_Misc_QuestionMark.png');";
    }

    public void OpenTab(PageTab newTab)
    {
        tabs.Add(newTab);
        ChangeTab(newTab);
        this.StateHasChanged();
    }
}