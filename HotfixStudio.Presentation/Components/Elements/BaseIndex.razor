@using HotfixStudio.Infrastructure.PresentationData
@using HotfixStudio.Presentation.ComponentModels
@using HotfixStudio.Presentation.Components.BaseElements
@using Microsoft.Extensions.FileProviders
@using System.Reflection

<div class="base-index-component @GetAnimateResizeClass()" style="@GetSizeStyles()">

    <div class="base-index-logo-top" @ondblclick="ResetSizes">
        Logo
    </div>

    <div class="base-index-aside" @ondblclick="ToggleMenu">
        <MainMenu @ref="mainMenu" MenuObjects="menuObjects" @bind-MenuOpen="menuOpen" />
        <BaseDragBar @bind-Size="asideWidth" Type="DragBarType.VERTICAL_RIGHT" MinSize="48" MaxSize="400" />
        <div class="aside-bar-img" />
    </div>

    <div class="base-index-content">
        <MainTabs @ref="mainTabs" OnTabDoubleClick="ResetHeaderSize" />
        <div class="base-index-menu-overlay @GetOverlayDisabledClass()" />
        <div class="header-bar-img" />
        <BaseDragBar @bind-Size="headerHeight" Type="DragBarType.HORIZONTAL_BOTTOM" />
    </div>

    <div class="base-index-logo-bottom">
        Logo
    </div>

    <div class="base-index-footer" @ondblclick="ResetFooterSize">
        <div class="footer-bar-img" />
        <BaseDragBar @bind-Size="footerHeight" Type="DragBarType.HORIZONTAL_TOP" />
        Footer
    </div>

</div>


@code {
    double asideWidth = 180;
    double footerHeight = 30;
    double headerHeight = 48;

    MainMenu? mainMenu;
    bool animateResize = false;
    bool menuOpen = false;

    MainTabs? mainTabs;

    List<MenuObject> menuObjects = new();

    protected override void OnAfterRender(bool firstRender)
    {
        animateResize = false;
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        await PreloadImages(); // TODO:


        var testCallback = EventCallback.Factory.Create(this, AddTab);

        for (int i = 0; i < 5; i++)
        {
            Dictionary<string, EventCallback> dashboardSection = new();
            dashboardSection.Add("Dashboard", testCallback);

            Dictionary<string, EventCallback> newSection = new();
            newSection.Add("Search by ID", testCallback);
            newSection.Add("Search by Name", testCallback);

            menuObjects.Add(new()
                {
                    Header = "Creatures",
                    IconName = "home"
                });
            menuObjects[i].AddSection(dashboardSection);
            menuObjects[i].AddSection(newSection);
        }

        await base.OnInitializedAsync();
    }

    async Task PreloadImages()
    {
        var assembly = Assembly.GetExecutingAssembly();
        var fileProvider = new EmbeddedFileProvider(assembly, $"{assembly.GetName()}.wwwroot");
        var imagePaths = await BuildImagePaths(assembly, fileProvider);
    }

    async Task<List<string>> BuildImagePaths(Assembly assembly, EmbeddedFileProvider fileProvider, string subPath = "")
    {
        var imagePaths = new List<string>();
        var contents = fileProvider.GetDirectoryContents(subPath);
        foreach (var content in contents)
        {
            if (content.IsDirectory)
            {
                var nestedImagePaths = await BuildImagePaths(assembly, fileProvider, content.Name);
                imagePaths.AddRange(nestedImagePaths);
            }
            else
            {
                var path = content.PhysicalPath;
                imagePaths.Add(path);
            }
        }
        return imagePaths;
    }

    void AddTab()
    {
        mainMenu?.Close();
        PageTab newTab = new()
            {
                Label = "Title",
                PageComponent = typeof(TestPage)
            };
        mainTabs?.OpenTab(newTab);
    }

    void ToggleMenu()
    {
        if (!menuOpen)
        {
            animateResize = true;
            if (asideWidth >= 180)
                asideWidth = 48;
            else
                asideWidth = 180;
        }
    }

    void ResetFooterSize()
    {
        if (footerHeight != 30)
        {
            animateResize = true;
            footerHeight = 30;
        }
    }

    void ResetHeaderSize()
    {
        if (headerHeight != 48)
        {
            animateResize = true;
            headerHeight = 48;
        }
    }

    void ResetSizes()
    {
        ToggleMenu();
        ResetFooterSize();
        ResetHeaderSize();
    }

    string GetAnimateResizeClass()
    {
        return animateResize ? " animate" : "";
    }

    string GetOverlayDisabledClass()
    {
        return menuOpen ? "" : " disabled";
    }

    string GetSizeStyles()
    {
        string styles = $"--component-header-height:{headerHeight}px;";
        styles += $"--component-footer-height:{footerHeight}px;";
        styles += $"--component-aside-width:{asideWidth}px;";
        return styles;
    }


}
