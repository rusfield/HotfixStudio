<div class="grid-component">
    <div class="grid-header">
        <div class="grid-logo" style="@($"width:{width}px;height:{height}px;")">
            @Logo
        </div>
        <div class="grid-tabs">
            @Tabs
        </div>
    </div>
    <div class="grid-body">
        <div class="grid-menu" style="@($"width:{width}px;")">
            @Menu
        </div>
        <div class="grid-content">
            <div class="grid-top-bar @GetResizingClass(0)" @onmousedown="(() => enableResizeTop = true)" />
            <div class="grid-content-row">
                <div class="grid-vertical-bar @GetResizingClass(1)" @onmousedown="(() => enableResizeWidth = true)" />
                <div class="grid-content-page">
                    @Content
                </div>
            </div>
            <div class="grid-bottom-bar @GetResizingClass(2)" @onmousedown="@(ResizeBottom)" />
        </div>
    </div>
    <div class="grid-footer" style="@($"height:{bottomHeight}px;")">

    </div>

    @if (enableResizeTop || enableResizeWidth || enableResizeBottom)
    {
        <div class="grid-resize-overlay @GetCursorClass()" @onmousemove="OnMouseMove" @onmouseup="DisableResize" @onmouseout="DisableResize" />
    }
</div>

@code {
    [Parameter]
    public RenderFragment Logo { get; set; }

    [Parameter]
    public RenderFragment Tabs { get; set; }

    [Parameter]
    public RenderFragment Menu { get; set; }

    [Parameter]
    public RenderFragment Content { get; set; }

    double height = 40;
    double width = 160;
    double bottomHeight = 30;
    double bottomStart = 0;
    double approxHeight = 0;
    bool enableResizeTop = false;
    bool enableResizeWidth = false;
    bool enableResizeBottom = false;

    void OnMouseMove(MouseEventArgs e)
    {
        if (enableResizeTop)
            height = Math.Clamp(e.ClientY, 30, 200);
        else if (enableResizeWidth)
            width = Math.Clamp(e.ClientX, 30, 400);
        else if (enableResizeBottom)
        {
            bottomHeight = Math.Clamp(approxHeight - e.ClientY, 30, 100);
        }
    }

    void DisableResize()
    {
        enableResizeTop = false;
        enableResizeWidth = false;
        enableResizeBottom = false;
    }

    string GetCursorClass()
    {
        if (enableResizeTop)
            return "height";
        else if (enableResizeWidth)
            return "width";
        return "";
    }

    string GetResizingClass(int type)
    {
        return (type == 0 && enableResizeTop) || (type == 1 && enableResizeWidth) || (type == 2 && enableResizeBottom) ? "resizing" : "";
    }

    void ResizeBottom(MouseEventArgs e)
    {
        enableResizeBottom = true;
        bottomStart = e.ClientY;
        approxHeight = bottomStart + bottomHeight;
    }
}
