@using HotfixStudio.Presentation.ComponentModels

<div class="main-menu-component">
    @for (int i = 0; i < MenuObjects.Count; i++)
    {
        int index = i;
        @if(MenuObjects[index].MenuIndex == 1000)
        {
            <div class="menu-split" />
        }
        <div class="label" @onmouseenter="(() => OpenMenu(index))" @onmouseleave="(() => MouseOut(index))">
            <div class="icon" style="@GetIconStyle(MenuObjects[index].IconName)">
            </div>
            <div class="text">
                <span>
                    @MenuObjects[index].Header
                </span>
            </div>
            @if (hoverIndex == index)
            {
                <div class="abs-pos">
                    <PopupMenu Label="@MenuObjects[i].Header" Sections="@MenuObjects[index].Sections" />
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public bool MenuOpen { get; set; }

    [Parameter]
    public EventCallback<bool> MenuOpenChanged { get; set; }

    [Parameter]
    public List<MenuObject> MenuObjects { get; set; }

    int hoverIndex = -1;

    protected override void OnInitialized()
    {
        MenuObjects.OrderBy(o => o.MenuIndex);
        base.OnInitialized();
    }

    void MouseOut(int index)
    {
        if (hoverIndex == index)
        {
            hoverIndex = -1;
            MenuOpen = false;
            MenuOpenChanged.InvokeAsync(MenuOpen);
        }
    }

    void OpenMenu(int index)
    {
        hoverIndex = index;
        MenuOpen = true;
        MenuOpenChanged.InvokeAsync(MenuOpen);
    }

    public void Close()
    {
        hoverIndex = -1;
        MenuOpen = false;
        MenuOpenChanged.InvokeAsync(MenuOpen);
    }

    string GetIconStyle(string iconName)
    {
        return string.IsNullOrWhiteSpace(iconName) ? "" : $"background-image: url('images/icons/{iconName}.png');";
    }
}
