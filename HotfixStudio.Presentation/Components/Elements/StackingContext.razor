<div class="stacking-context-component">
    <div class="controls">
        <HotfixStudio.Presentation.Components.BaseElements.BaseButton Content="Click" OnClick="ToggleUseDbValueAsText" />
    </div>
    <CascadingValue Value="@this">
        <CascadingValue Name="UseDbValueAsText" Value="@useDbValueAsText">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
    <div class="overlay @GetVisibilityClass()" />
    <div class="underlay @GetVisibilityClass()" @onclick="@UnderlayClick" />
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    EventCallback currentBlurElementEventCallback;
    int currentBlurTimeMs = 0;

    bool contextFocused = false;
    bool useDbValueAsText = false;

    string GetVisibilityClass()
    {
        return contextFocused ? "visible" : "invisible";
    }

    void UnderlayClick()
    {
        BlurContext();
    }

    void ToggleUseDbValueAsText()
    {
        useDbValueAsText = !useDbValueAsText;
        this.StateHasChanged();
    }

    public int FocusContext(EventCallback blurElementEventCallback, int blurTimeMs = 0)
    {
        if (!contextFocused)
        {
            contextFocused = true;
            this.StateHasChanged();
        }
        else
        {
            currentBlurElementEventCallback.InvokeAsync();
        }
        currentBlurElementEventCallback = blurElementEventCallback;
        int oldBlurTimeMs = this.currentBlurTimeMs;
        currentBlurTimeMs = blurTimeMs;
        return oldBlurTimeMs;
    }

    public void BlurContext()
    {
        currentBlurElementEventCallback.InvokeAsync();
        currentBlurElementEventCallback = EventCallback.Empty;
        currentBlurTimeMs = 0;
        if (contextFocused)
        {
            contextFocused = false;
            this.StateHasChanged();
        }
    }
}
