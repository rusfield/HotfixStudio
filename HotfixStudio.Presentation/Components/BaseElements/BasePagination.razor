<div class="base-pagination-component" style="@GetThumbStyle()">
    <div class="navigation-container">
        <Button BackgroundColor="ElementColor.TRANSPARENT" Size="ElementSize.COMPACT" OnClick="(() => Navigate(CurrentPageIndex -1))" Disabled="@(!canPrevious)">
            <Icon IconName="arrow_circle_left" />
        </Button>
    </div>
    <div class="base-pagination-container @GetPageClass()">
        <input type="range" min="0" max="@(TotalPages - 1)" value="@CurrentPageIndex" @oninput="OnSliderDragged" @onchange="OnSliderReleased" />
        <div class="base-pagination-slider-handle" style="@GetHandleStyle()">@(CurrentPageIndex + 1)</div>
    </div>
    <div class="navigation-container">
        <Button BackgroundColor="ElementColor.TRANSPARENT" Size="ElementSize.COMPACT" OnClick="(() => Navigate(CurrentPageIndex + 1))" Disabled="@(!canNext)">
            <Icon IconName="arrow_circle_right" />
        </Button>
    </div>
</div>

@code {
    [Parameter]
    public int CurrentPageIndex { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageIndexChanged { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public ElementSize Size { get; set; } = ElementSize.DEFAULT;


    double sliderPercentage = 0;
    double sliderSizeAdjustment = 0;
    int sliderThumbSize = 48;
    bool isOnePageOnly = false;
    bool canNext = true;
    bool canPrevious = true;

    protected override void OnParametersSet()
    {
        isOnePageOnly = TotalPages <= 1;
        sliderThumbSize = Size == ElementSize.DEFAULT ? 48 : 24;
        SetSliderValues();
        base.OnParametersSet();
    }

    void OnSliderDragged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var newValue))
        {
            Navigate(newValue, false);
        }
    }

    void OnSliderReleased()
    {
        Navigate(CurrentPageIndex);
    }

    void Navigate(int navigateTo, bool invokeChange = true)
    {
        if (0 <= navigateTo && navigateTo <= TotalPages)
        {
            CurrentPageIndex = navigateTo;
            SetSliderValues();
            if (invokeChange)
                CurrentPageIndexChanged.InvokeAsync(CurrentPageIndex);
        }
    }

    string GetThumbStyle()
    {
        string style = $"--component-thumb-size:{sliderThumbSize}px;";

        if (Size == ElementSize.COMPACT && CurrentPageIndex >= 99)
            style += "--component-page-font-size:8px;";

        return style;
    }

    string GetHandleStyle()
    {
        return $"left: calc({sliderPercentage}% - {sliderSizeAdjustment}px);";
    }

    string GetPageClass()
    {
        return isOnePageOnly ? "one-page" : "";
    }

    void SetSliderValues()
    {
        canNext = CurrentPageIndex < TotalPages - 1;
        canPrevious = CurrentPageIndex > 0;
        if(TotalPages > 1)
        {
            sliderPercentage = ((double)CurrentPageIndex / (TotalPages - 1)) * 100;
            sliderSizeAdjustment = sliderPercentage * sliderThumbSize / 100;
        }
        else
        {
            sliderPercentage = 0;
            sliderSizeAdjustment = 0;
        }
    }
}