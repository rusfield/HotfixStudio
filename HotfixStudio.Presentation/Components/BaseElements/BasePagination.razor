<div class="base-pagination-component" style="@GetSizeStyle()">
    @if (TotalPages > 10)
    {
        <div class="navigation-container">
            <Button BackgroundColor="ElementColor.TRANSPARENT" Size="ElementSize.COMPACT" OnClick="(() => Navigate(CurrentPageIndex -1))" Disabled="@(!canPrevious)">
                <Icon IconName="arrow_circle_left" />
            </Button>
        </div>
        <div class="base-pagination-container @GetPageClass()">
            <input type="range" min="0" max="@(TotalPages - 1)" value="@CurrentPageIndex" @oninput="OnSliderDragged" @onchange="OnSliderReleased" />
            <div class="handle-wrapper" style="@GetHandlePositionStyle() @GetFontSizeStyle(CurrentPageIndex + 1)">
                <Button Size="ElementSize.COMPACT">
                    <div class="page-block">
                        @(CurrentPageIndex + 1)
                    </div>
                </Button>
            </div>
            @if (CurrentPageIndex == 0 && TotalPages > 1)
            {
                <div class="handle-wrapper total-pages" style="@GetFontSizeStyle(TotalPages)">
                    <Button Size="ElementSize.COMPACT">
                        <div class="page-block">
                            @(TotalPages)
                        </div>
                    </Button>
                </div>
            }
        </div>
        <div class="navigation-container">
            <Button BackgroundColor="ElementColor.TRANSPARENT" Size="ElementSize.COMPACT" OnClick="(() => Navigate(CurrentPageIndex + 1))" Disabled="@(!canNext)">
                <Icon IconName="arrow_circle_right" />
            </Button>
        </div>
    }
    else
    {
        for (int i = 0; i < TotalPages; i++)
        {
            int pageIndex = i;
            <Button Size="ElementSize.COMPACT" OnClick="(() => Navigate(pageIndex))" BackgroundColor="GetColor(pageIndex)">
                <div class="page-block">
                    @(pageIndex + 1)
                </div>
            </Button>
        }
    }
</div>

@code {
    [Parameter]
    public int CurrentPageIndex { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageIndexChanged { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public ElementSize Size { get; set; } = ElementSize.DEFAULT;


    double sliderPercentage = 0;
    double sliderSizeAdjustment = 0;
    int sliderThumbSize = 48;
    bool isOnePageOnly = false;
    bool canNext = true;
    bool canPrevious = true;

    protected override void OnParametersSet()
    {
        isOnePageOnly = TotalPages <= 1;
        sliderThumbSize = Size == ElementSize.DEFAULT ? 48 : 24;
        SetSliderValues();
        base.OnParametersSet();
    }

    void OnSliderDragged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var newValue))
        {
            Navigate(newValue, false);
        }
    }

    void OnSliderReleased()
    {
        Navigate(CurrentPageIndex);
    }

    void Navigate(int navigateTo, bool invokeChange = true)
    {
        if (0 <= navigateTo && navigateTo <= TotalPages)
        {
            CurrentPageIndex = navigateTo;
            SetSliderValues();
            if (invokeChange)
                CurrentPageIndexChanged.InvokeAsync(CurrentPageIndex);
        }
    }

    string GetFontSizeStyle(int displayValue)
    {
        if (Size == ElementSize.COMPACT && displayValue > 99)
            return "--component-page-font-size:8px;";

        return "";
    }

    string GetSizeStyle()
    {
        return $"--component-thumb-size:{sliderThumbSize}px;";
    }

    string GetHandlePositionStyle()
    {
        return $"left: calc({sliderPercentage}% - {sliderSizeAdjustment}px);";
    }

    string GetPageClass()
    {
        return isOnePageOnly ? "one-page" : "";
    }

    void SetSliderValues()
    {
        canNext = CurrentPageIndex < TotalPages - 1;
        canPrevious = CurrentPageIndex > 0;
        if (TotalPages > 1)
        {
            sliderPercentage = ((double)CurrentPageIndex / (TotalPages - 1)) * 100;
            sliderSizeAdjustment = sliderPercentage * sliderThumbSize / 100;
        }
        else
        {
            sliderPercentage = 0;
            sliderSizeAdjustment = 0;
        }
    }

    ElementColor GetColor(int index)
    {
        return index == CurrentPageIndex ? ElementColor.PRIMARY : ElementColor.TRANSPARENT;
    }
}