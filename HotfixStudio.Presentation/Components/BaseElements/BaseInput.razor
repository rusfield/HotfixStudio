@typeparam T

<div class="base-input-component @GetStatusClassString()">
    <div class="base-input-label" @onclick="FocusInput">
        @Label
    </div>
    <div class="base-input-container">
        @if (Status == ElementStatus.LOADING)
        {
            <div class="base-input-loading">
                Loading...
            </div>
        }
        else
        {
            <input @ref="input" @bind="Value" spellcheck="false" type="@(GetInputType())" tabindex="1" @onfocus="@OnFocus" @onblur="OnBlur" @oninput="OnInputInternal" />
        }
    </div>
</div>



@code {
    [CascadingParameter]
    public StackingContext? StackingContext { get; set; }

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public string Label { get; set; } = "Label";

    [Parameter]
    public ElementStatus Status { get; set; } = ElementStatus.NONE;

    [Parameter]
    public EventCallback OnFocus { get; set; }

    [Parameter]
    public EventCallback OnBlur { get; set; }

    [Parameter]
    public EventCallback<string> OnInputChanged { get; set; }

    int onInputDebounceTime = 200;
    Timer? debounceTimer;
    string lastInputValue = "";
    ElementReference? input;

    string GetInputType()
    {
        return typeof(T) == typeof(string) ? "text" : "number";
    }

    void OnInputInternal(ChangeEventArgs args)
    {
        var newValue = args.Value?.ToString() ?? "";
        if (OnInputChanged.HasDelegate)
        {
            debounceTimer?.Dispose();
            debounceTimer = new Timer(_ =>
            {
                if (newValue == lastInputValue)
                {
                    InvokeAsync(() =>
                    {
                        OnInputChanged.InvokeAsync(newValue);
                    });
                }
            }, null, onInputDebounceTime, Timeout.Infinite);
            lastInputValue = newValue;
        }
    }

    string GetStatusClassString()
    {
        return Status == ElementStatus.NONE ? "" : Status.ToString().ToLower();
    }

    void FocusInput()
    {
        if (input != null)
            input.Value.FocusAsync();
    }
}
