@using HotfixStudio.Infrastructure.Extensions

@typeparam T

<div class="base-input-component @GetStatusClassString()">
    <div class="base-input-label" @onclick="FocusInput">
        @Label
    </div>
    <div class="base-input-container">
        @if (Status == ElementStatus.LOADING)
        {
            <div class="base-input-loading">
                Loading...
            </div>
        }
        else
        {
            <input @ref="input" @bind="inputValue" spellcheck="false" type="@(GetInputType())" tabindex="1" @onfocus="@OnFocusInternal" @onblur="OnBlurInternal" @oninput="OnInputInternal" />
        }
    </div>
</div>



@code {
    [CascadingParameter]
    public StackingContext? StackingContext { get; set; }

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public string Label { get; set; } = "Label";

    [Parameter]
    public ElementStatus Status { get; set; } = ElementStatus.NONE;

    [Parameter]
    public EventCallback OnFocus { get; set; }

    [Parameter]
    public EventCallback OnBlur { get; set; }

    [Parameter]
    public EventCallback<string> OnInputChanged { get; set; }

    [Parameter]
    public int InputDebounceTimeMs { get; set; } = 200;

    Timer? debounceTimer;
    string inputValue = "";
    T lastVerifiedValue;
    ElementReference? input;

    protected override void OnInitialized()
    {
        inputValue = Value.ToString();
        lastVerifiedValue = Value;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (!Value.Equals(lastVerifiedValue))
        {
            lastVerifiedValue = Value;
            inputValue = Value.ToString();
        }
        base.OnParametersSet();
    }

    string GetInputType()
    {
        return typeof(T) == typeof(string) ? "text" : "number";
    }

    void OnInputInternal(ChangeEventArgs args)
    {
        if (OnInputChanged.HasDelegate)
        {
            debounceTimer?.Dispose();
            debounceTimer = new Timer(_ =>
            {
                InvokeAsync(() =>
                {
                    OnInputChanged.InvokeAsync(args.Value?.ToString() ?? "");
                });
            }, null, InputDebounceTimeMs, Timeout.Infinite);
        }
    }

    void OnFocusInternal()
    {
        OnFocus.InvokeAsync();
    }

    void OnBlurInternal()
    {
        SetValue();
        OnBlur.InvokeAsync();
    }

    string GetStatusClassString()
    {
        return Status == ElementStatus.NONE ? "" : Status.ToString().ToLower();
    }

    void FocusInput()
    {
        if (input != null)
            input.Value.FocusAsync();
    }

    void SetValue()
    {
        InvokeAsync(() =>
        {
            if (typeof(T).TryParseAs<T>(inputValue, out var genericValue))
            {
                Value = genericValue;
                lastVerifiedValue = Value;
            }
            else
            {
                Value = lastVerifiedValue;
            }
            ValueChanged.InvokeAsync(Value);
            inputValue = Value.ToString();
        });
    }
}
