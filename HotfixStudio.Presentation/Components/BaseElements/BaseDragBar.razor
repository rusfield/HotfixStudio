<div class="base-drag-bar-component @GetVisibilityClass() @GetDynamicClasses()" @onmousedown="EnableResizeState">
    @if (isResizing)
    {
        <div class="base-drag-bar-overlay @GetCursorClass()" @onmousemove="OnResize" @onmouseup="DisableResizeState" @onmouseout="OnMouseOut" />
    }
</div>


@code {
    [Parameter]
    public double Size { get; set; }

    [Parameter]
    public EventCallback<double> SizeChanged { get; set; }

    [Parameter]
    public double MinSize { get; set; } = -1;

    [Parameter]
    public double MaxSize { get; set; } = -1;

    [Parameter]
    public EventCallback OnResizeStart { get; set; }

    [Parameter]
    public EventCallback OnResizeEnd { get; set; }

    [Parameter]
    public DragBarType Type { get; set; }

    [Parameter]
    public bool Visible { get; set; } = false;

    bool isResizing = false;

    double startX = -1;
    double startY = -1;
    double startSize = -1; // Horizontal Bottom
    double approximateSize = -1; //Horizontal Top

    void EnableResizeState(MouseEventArgs args)
    {
        startX = args.ClientX;
        startY = args.ClientY;
        startSize = Size;

        isResizing = true;
        OnResizeStart.InvokeAsync();
    }

    void DisableResizeState()
    {
        isResizing = false;
        OnResizeEnd.InvokeAsync();
    }

    void OnResize(MouseEventArgs args)
    {
        double newSize = 0;
        if (Type == DragBarType.HORIZONTAL_TOP)
        {
            newSize = startSize + startY - args.ClientY;
        }
        else if (Type == DragBarType.HORIZONTAL_BOTTOM)
        {
            newSize = startSize - startY + args.ClientY;
        }
        else if (Type == DragBarType.VERTICAL_LEFT)
        {
            newSize = startSize + startX - args.ClientX;
        }
        else if (Type == DragBarType.VERTICAL_RIGHT)
        {
            newSize = startSize - startX + args.ClientX;
        }
        if (MinSize >= 0 && MaxSize > MinSize)
            newSize = Math.Clamp(newSize, MinSize, MaxSize);

        Size = newSize;
        SizeChanged.InvokeAsync(Size);
    }

    void OnMouseOut()
    {
        double newSize = 0;
        if (Type == DragBarType.HORIZONTAL_TOP)
        {
            newSize = Size + 20;
        }
        else if (Type == DragBarType.HORIZONTAL_BOTTOM)
        {
            newSize = Size - 20;
        }
        else if (Type == DragBarType.VERTICAL_LEFT)
        {
            newSize = Size + 20;
        }
        else if (Type == DragBarType.VERTICAL_RIGHT)
        {
            newSize = Size - 20;
        }
        if (MinSize >= 0 && MaxSize > MinSize)
        {
            if (newSize < MinSize)
                newSize = MinSize;
            else if (newSize < MaxSize)
                newSize = MaxSize;
        }

        Size = newSize;
        SizeChanged.InvokeAsync(Size);
        DisableResizeState();
    }

    string GetCursorClass()
    {
        return Type.ToString().Split("_")[0].ToLower();
    }

    string GetDynamicClasses()
    {
        string classes = isResizing ? "resizing " : "";

        var enumClasses = Type.ToString().Split("_");
        foreach (var enumClass in enumClasses)
            classes += $"{enumClass.ToLower()} ";
        return classes;
    }

    string GetVisibilityClass()
    {
        return Visible ? "visible" : "";
    }
}
